package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"panna_cotta_gateway/graph/model"
)

// CreateEvent is the resolver for the createEvent field.
func (r *mutationResolver) CreateEvent(ctx context.Context, input model.NewEvent) (*model.Event, error) {
	panic(fmt.Errorf("not implemented: CreateEvent - createEvent"))
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// ChillSpot is the resolver for the chillSpot field.
func (r *queryResolver) ChillSpot(ctx context.Context, id string) (*model.ChillSpot, error) {
	panic(fmt.Errorf("not implemented: ChillSpot - chillSpot"))
}

// ChillSpots is the resolver for the chillSpots field.
func (r *queryResolver) ChillSpots(ctx context.Context, where *model.ChillSpotsWhere) ([]*model.ChillSpot, error) {
	panic(fmt.Errorf("not implemented: ChillSpots - chillSpots"))
}

// Genre is the resolver for the genre field.
func (r *queryResolver) Genre(ctx context.Context, id string) (*model.Genre, error) {
	panic(fmt.Errorf("not implemented: Genre - genre"))
}

// Genres is the resolver for the genres field.
func (r *queryResolver) Genres(ctx context.Context) ([]*model.Genre, error) {
	panic(fmt.Errorf("not implemented: Genres - genres"))
}

// Song is the resolver for the song field.
func (r *queryResolver) Song(ctx context.Context, id string) (*model.Song, error) {
	panic(fmt.Errorf("not implemented: Song - song"))
}

// Songs is the resolver for the songs field.
func (r *queryResolver) Songs(ctx context.Context) ([]*model.Song, error) {
	panic(fmt.Errorf("not implemented: Songs - songs"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Event is the resolver for the event field.
func (r *queryResolver) Event(ctx context.Context, id string) (*model.Event, error) {
	panic(fmt.Errorf("not implemented: Event - event"))
}

// Events is the resolver for the events field.
func (r *queryResolver) Events(ctx context.Context) ([]*model.Event, error) {
	panic(fmt.Errorf("not implemented: Events - events"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
